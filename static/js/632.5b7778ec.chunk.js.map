{"version":3,"file":"static/js/632.5b7778ec.chunk.js","mappings":"gLACA,G,QAAmC,mCAAnC,EAA6F,uCAA7F,EAAkJ,6BAAlJ,EAAwL,wBAAxL,EAAyN,wBAAzN,EAA4P,0BAA5P,EAAgS,yBAAhS,EAA+T,qBAA/T,EAAkW,6BAAlW,EAA4Y,4BAA5Y,EAAqb,4B,6BCUxaA,EAAa,SAACC,GACvB,OACI,iBAAKC,UAAWC,EAAW,IAAMA,EAAjC,WACI,gBAAKD,UAAWC,EAAOC,IAAI,MAAMC,IAAKC,KACtC,UAAC,KAAD,CAASC,GAAI,YAAcN,EAAMO,GAAjC,cAAuCP,EAAMQ,KAA7C,WCTCC,EAAU,SAACT,GAGpB,OACI,gBAAKC,UAAYC,EAAjB,SACKF,EAAMU,W,wCCyBnB,EA1BgB,SAACV,GAEb,IAIMW,EAAkBX,EAAMY,YAAYC,QAAQC,KAAI,SAAAC,GAAE,OAAI,SAAChB,EAAD,CAAwBQ,GAAIQ,EAAGR,GAAIC,KAAMO,EAAGP,MAA3BO,EAAGR,OAC1ES,EAAkBhB,EAAMY,YAAYK,SAASH,KAAI,SAAAC,GAAE,OAAI,SAACN,EAAD,CAAqBF,GAAIQ,EAAGR,GAAIG,QAASK,EAAGL,SAA9BK,EAAGR,OAE9E,OACI,iBAAKN,UAAWC,EAAhB,WACI,iBAAKD,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKS,KAEL,gBAAKV,UAAWC,EAAhB,SAEQc,QAKZ,SAACE,EAAD,CAAuBC,SApBT,SAACC,GACnBpB,EAAMqB,aAAaD,EAAOE,mBA8B5BC,GAAcC,EAAAA,EAAAA,GAAiB,IAgB/BN,GAAwBO,EAAAA,EAAAA,GAAwB,CAClDC,KAAM,yBADoBD,EAfV,SAACzB,GACjB,OAAO,0BACH,kBAAMmB,SAAUnB,EAAM2B,aAAc1B,UAAWC,EAA/C,WACI,SAAC0B,EAAA,EAAD,CAAOC,YAAa,qBACbrB,KAAM,aACNsB,UAAWC,EAAAA,EACX9B,UAAWC,EACX8B,SAAU,CAACC,EAAAA,EAAeV,MAEjC,0BACI,mBAAQtB,UAAWC,EAAnB,4B,8BCnBhB,GAAegC,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAjBkB,SAACC,GACnB,MAAO,CACHxB,YAAawB,EAAMC,mBAGF,SAACC,GACtB,MAAO,CACHjB,aAAc,SAACC,GACXgB,GAASC,EAAAA,EAAAA,GAAajB,SAU9BkB,EAAAA,EAFJ,CAGEC,I,iIC7BIC,EAAkB,SAACN,GACrB,MAAO,CACHO,OAAQP,EAAMQ,YAAYD,SAI3B,SAASH,EAAoBK,GAShC,OAFiCV,EAAAA,EAAAA,IAAQO,EAARP,EANP,SAACnC,GACvB,IAAK2C,EAAwB3C,EAAxB2C,OAAWG,GAAhB,OAA6B9C,EAA7B,GACA,OAAK2C,GACE,SAACE,GAAD,UAAeC,KADF,SAAC,KAAD,CAAUxC,GAAI,gB","sources":["webpack://Social_network/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsConteiner.tsx","hoc/WithAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogsContainer\":\"Dialogs_dialogsContainer__DNPlQ\",\"elemMessagesContainer\":\"Dialogs_elemMessagesContainer__7wAsp\",\"dialogsItem\":\"Dialogs_dialogsItem__HkESk\",\"dialog\":\"Dialogs_dialog__8OEy6\",\"active\":\"Dialogs_active__z5J1T\",\"messages\":\"Dialogs_messages__zbf02\",\"message\":\"Dialogs_message__4tpst\",\"img\":\"Dialogs_img__5rGnn\",\"inputButton\":\"Dialogs_inputButton__knRw4\",\"inputField\":\"Dialogs_inputField__umKrJ\",\"sendButton\":\"Dialogs_sendButton__WWc1J\"};","import s from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {UserPropsType} from \"../../../redax/dialogsReducer\";\r\nimport img from '../../../images/images.jpg'\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const DialogItem = (props: UserPropsType) => {\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <img className={s.img} alt='img' src={img}/>\r\n            <NavLink to={'/dialogs/' + props.id}> {props.name} </NavLink>\r\n        </div>\r\n    )\r\n}","import s from \"../Dialogs.module.css\";\r\nimport React from \"react\";\r\nimport {MessagePropsType} from \"../../../redax/dialogsReducer\";\r\n\r\n\r\n\r\nexport const Message = (props: MessagePropsType) => {\r\n\r\n\r\n    return (\r\n        <div className= {s.message}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsConteiner\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport InputControls from \"../common/FormsControl/FormsControl\";\r\nimport {maxLengthCreator, requiredField} from \"../../utils/validators/validators\";\r\n\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n\r\n    const addNewMessage = (values: FormDataType) => {\r\n        props.onAddMessage(values.newMessage)\r\n    }\r\n\r\n    const dialogsElements = props.dialogsPage.profile.map(el => <DialogItem key={el.id} id={el.id} name={el.name}/>)\r\n    const messageElements = props.dialogsPage.messages.map(el => <Message key={el.id} id={el.id} message={el.message}/>)\r\n\r\n    return (\r\n        <div className={s.dialogsContainer}>\r\n            <div className={s.elemMessagesContainer}>\r\n                <div className={s.dialogsItem}>\r\n                    {dialogsElements}\r\n                </div>\r\n                <div className={s.messages}>\r\n                    {\r\n                        messageElements\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n            <DialogsAddMessageForm onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\nexport default Dialogs;\r\n\r\n\r\ntype FormDataType = {\r\n    newMessage: string\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\nconst DialogsForm = (props: InjectedFormProps<FormDataType>) => {\r\n    return <div>\r\n        <form onSubmit={props.handleSubmit} className={s.inputButton}>\r\n            <Field placeholder={'Enter your message'}\r\n                   name={'newMessage'}\r\n                   component={InputControls}\r\n                   className={s.inputField}\r\n                   validate={[requiredField, maxLength50]}\r\n            />\r\n            <div>\r\n                <button className={s.sendButton}>send</button>\r\n            </div>\r\n        </form>\r\n    </div>\r\n}\r\nconst DialogsAddMessageForm = reduxForm<FormDataType>({\r\n    form: 'dialogsAddMessageForm',\r\n    //fields: [] // all the fields in your form\r\n})(DialogsForm)\r\n\r\n","import {FC} from 'react';\r\nimport {addMessageAC, DialogsPageType} from \"../../redax/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redax/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogsPageType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    onAddMessage: (newMessage:string) => void\r\n\r\n}\r\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsReducer\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        onAddMessage: (newMessage) => {\r\n            dispatch(addMessageAC(newMessage))\r\n        },\r\n    }\r\n}\r\n\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs);\r\n// const AuthRedirectComponent = WithAuthRedirect(DialogsContainer)\r\n// export default AuthRedirectComponent;\r\nexport default compose<FC>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    WithAuthRedirect,\r\n)(Dialogs)\r\n\r\n\r\n\r\n\r\n\r\n","import React, {ComponentType} from 'react';\r\nimport {AppStateType} from \"../redax/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\nconst MapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.authReducer.isAuth\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(MapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent\r\n}\r\n\r\n"],"names":["DialogItem","props","className","s","alt","src","img","to","id","name","Message","message","dialogsElements","dialogsPage","profile","map","el","messageElements","messages","DialogsAddMessageForm","onSubmit","values","onAddMessage","newMessage","maxLength50","maxLengthCreator","reduxForm","form","handleSubmit","Field","placeholder","component","InputControls","validate","requiredField","compose","connect","state","dialogsReducer","dispatch","addMessageAC","WithAuthRedirect","Dialogs","MapStateToProps","isAuth","authReducer","Component","restProps"],"sourceRoot":""}